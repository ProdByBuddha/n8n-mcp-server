--- examples/mcp-multi-host.js.backup
+++ examples/mcp-multi-host.js
@@ -306,7 +306,8 @@
 async function main() {
   const args = parseArgs(process.argv.slice(2));
   const transports = (args.transport || 'stdio,http,sse,ws').toLowerCase().split(',');
-  
+
+  const transportPromises = [];
   if (transports.includes('http')) {
     const app = express();
     app.use(bodyParser.json());
@@ -322,10 +323,14 @@
       } catch (e) { return res.status(500).json({ error: e.message }); }
     });
     const port = args.port || process.env.PORT || 3005;
-    app.listen(port, () => console.log(`[multi-host] HTTP listening on ${port}`));
+    transportPromises.push(new Promise((resolve) => {
+      app.listen(port, () => {
+        console.log(`[multi-host] HTTP listening on ${port}`);
+        resolve();
+      });
+    }));
   }
 
   if (transports.includes('sse')) {
     const app = express();
     app.use(bodyParser.json());
@@ -339,10 +344,14 @@
       send({ message: 'MCP SSE connection established.' });
     });
     const port = args.ssePort || process.env.SSE_PORT || 3006;
-    app.listen(port, () => console.log(`[multi-host] SSE listening on ${port}`));
+    transportPromises.push(new Promise((resolve) => {
+      app.listen(port, () => {
+        console.log(`[multi-host] SSE listening on ${port}`);
+        resolve();
+      });
+    }));
   }
 
   if (transports.includes('ws') || transports.includes('websocket')) {
     if (!WebSocketServer) { console.error('WS transport requested but ws is not installed'); process.exit(1); }
     const app = express();
@@ -350,7 +359,11 @@
     const port = args.wsPort || process.env.WS_PORT || 3007;
-    const server = app.listen(port, () => console.log(`[multi-host] WS listening on ${port}`));
+    transportPromises.push(new Promise((resolve) => {
+      const server = app.listen(port, () => {
+        console.log(`[multi-host] WS listening on ${port}`);
+        resolve();
+      });
     const wss = new WebSocketServer({ server, path: '/mcp' });
     wss.on('connection', (ws) => {
       ws.on('message', async (msg) => {
@@ -366,8 +379,13 @@
         } catch (e) { ws.send(JSON.stringify({ error: e.message })); }
       });
     });
+    }));
   }
 
+  // Wait for all HTTP-based transports to start
+  if (transportPromises.length > 0) {
+    await Promise.all(transportPromises);
+  }
+
   if (transports.includes('stdio')) {
     // stdio loop
     let buffer = '';
